{"version":3,"sources":["components/card.js","components/cardlist.js","components/scroll.js","components/useInput.js","components/formgen.js","components/addrobot.js","containers/app.js","reportWebVitals.js","index.js"],"names":["Card","name","email","className","alt","src","fontSize","fontWeight","color","CardList","robots","map","user","i","Scroll","props","style","overflow","border","height","children","useInput","prop","useState","value","setValue","reset","FormGen","id","label","type","handleChange","isRequired","pl","width","focusBorderColor","variant","placeholder","onChange","AddRobots","handleFirst","handleLast","handleEmail","handleSubmit","onSubmit","spacing","mt","bg","App","setRobots","searchfield","setSearch","firstName","setFirst","lastName","setLast","setEmail","useEffect","a","fetch","users","json","fetchRobots","filteredRobots","filter","robot","toLowerCase","includes","pd","event","target","preventDefault","trim","toAdd","length","username","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e5c711c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Text } from '@chakra-ui/react';\r\n\r\nconst Card = ({ name, email }) => {\r\n  return (\r\n    <div className=\"bg-light-gray dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt=\"robots\" src={`https://robohash.org/${email + name}200x200`} />\r\n        <div>\r\n          <Text fontSize='md' fontWeight=\"bold\" color=\"#14274E\">{name}</Text>\r\n          <Text fontSize='md'color=\"#14274E\">{email}</Text>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card key={i} name={user.name} email={user.email} />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return(\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import { useState } from \"react\";\r\n\r\nexport const useInput = (prop) => {\r\n  const [value, setValue] = useState(prop);\r\n\r\n  return {\r\n    value,\r\n    setValue,\r\n    reset: () => setValue(\"\"),\r\n  };\r\n};","import { Input } from \"@chakra-ui/react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n} from \"@chakra-ui/react\";\r\n\r\nexport const FormGen = ({ id, label, type, handleChange }) => {\r\n  return (\r\n    <FormControl id={id} isRequired>\r\n      <FormLabel pl=\"30%\">{label}</FormLabel>\r\n      <Input width=\"40%\" focusBorderColor=\"#14274E\" variant=\"outline\" type={type} placeholder={label} onChange={handleChange}/>\r\n    </FormControl>\r\n  );\r\n}","import { Button } from \"@chakra-ui/react\";\r\nimport { FormGen } from './formgen';\r\n\r\nexport const AddRobots = ({ handleFirst, handleLast, handleEmail, handleSubmit }) => {\r\n  return (\r\n  <form onSubmit={handleSubmit}>\r\n    <FormGen id=\"first-name\" label=\"First name\" type=\"text\" handleChange={handleFirst}/>\r\n    <FormGen id=\"last-name\" label=\"Last name\" type=\"text\" handleChange={handleLast} />\r\n    <FormGen id=\"email\" label=\"Email\" type=\"email\" handleChange={handleEmail}/>\r\n    <Button spacing={4} mt={4} bg='blue.700' color=\"white\" type='submit'>Add</Button>\r\n  </form>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CardList from \"../components/cardlist\";\r\nimport Scroll from \"../components/scroll\";\r\nimport { useInput } from \"../components/useInput\";\r\nimport { AddRobots } from \"../components/addrobot\";\r\nimport { Input } from \"@chakra-ui/react\";\r\nimport { Heading } from \"@chakra-ui/react\";\r\nimport \"./app.css\";\r\n\r\nconst App = () => {\r\n  const [robots, setRobots] = useState([]);\r\n  const { value: searchfield, setValue: setSearch } = useInput(\"\");\r\n  const {\r\n    value: firstName,\r\n    setValue: setFirst,\r\n  } = useInput(\"\");\r\n  const { value: lastName, setValue: setLast } = useInput(\"\");\r\n  const { value: email, setValue: setEmail } = useInput(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchRobots() {\r\n      let users = await fetch(\"https://jsonplaceholder.typicode.com/users\");\r\n      users = await users.json();\r\n      setRobots(users);\r\n    }\r\n    fetchRobots();\r\n  }, []);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setFirst(firstName.trim());\r\n    setLast(lastName.trim());\r\n    const toAdd = {\r\n      id: robots.length + 1,\r\n      name: firstName + \" \" + lastName,\r\n      username: firstName,\r\n      email: email,\r\n    };\r\n    console.log(\"full name\", toAdd.name);\r\n    setRobots([...robots, toAdd]);\r\n  };\r\n\r\n  const filteredRobots = robots.filter((robot) => {\r\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n  });\r\n\r\n  return (\r\n    <div className=\"tc\">\r\n      <Heading color=\"blue.700\" fontSize=\"5xl\">\r\n        RoboFriends\r\n      </Heading>\r\n      <div className=\"function\">\r\n        <Input\r\n          pd=\"5%\"\r\n          width=\"40%\"\r\n          focusBorderColor=\"blue.700\"\r\n          placeholder=\"Search\"\r\n          value={searchfield}\r\n          onChange={(event) => setSearch(event.target.value)}\r\n        />\r\n        <AddRobots\r\n          handleFirst={(event) => setFirst(event.target.value)}\r\n          handleLast={(event) => setLast(event.target.value)}\r\n          handleEmail={(event) => setEmail(event.target.value)}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </div>\r\n      <Scroll>\r\n        <CardList robots={filteredRobots} />\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport 'tachyons';\n\nReactDOM.render(<ChakraProvider><App/></ChakraProvider>, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}